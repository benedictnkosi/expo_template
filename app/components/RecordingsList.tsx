import React, { useState, useMemo } from 'react';
import { View, StyleSheet, ScrollView, ActivityIndicator, Image, TouchableOpacity } from 'react-native';
import { ThemedText } from '@/components/ThemedText';
import { useTheme } from '@/contexts/ThemeContext';
import { HOST_URL } from '@/config/api';
import { Ionicons } from '@expo/vector-icons';
import { RecordingPlayerModal } from './RecordingPlayerModal';

interface LectureRecording {
    recordingFileName: string;
    lecture_name: string;
    image: string | null;
    main_topic: string;
}

interface RecordingsListProps {
    recordings: LectureRecording[];
    isLoading: boolean;
}

interface GroupedRecordings {
    [key: string]: LectureRecording[];
}

const TOPIC_EMOJIS: { [key: string]: string } = {
    // Physical Sciences
    'CHEMICAL CHANGE: Acids and bases': '‚öóÔ∏è',
    'CHEMICAL CHANGE: Chemical equilibrium': '‚öñÔ∏è',
    'CHEMICAL CHANGE: Electrochemical reactions': '‚ö°',
    'CHEMICAL CHANGE: Rate and extent of reaction': '‚è≥',
    'ELECTRICITY & MAGNETISM: Electrodynamics': '‚ö°',
    'MATTER & MATERIALS: Optical phenomena and properties of materials': 'üîÆ',
    'MATTER & MATERIALS: Organic molecules': 'üî¨',
    'MECHANICS: Momentum & impulse': 'üèÉ‚Äç‚ôÇÔ∏è',
    'MECHANICS: Work, energy, and power': 'üí™',
    'WAVES, SOUND & LIGHT: Doppler Effect': 'üì°',

    // Life Sciences
    'ANIMAL NUTRITION': 'ü•©',
    'ANIMAL PRODUCTION': 'üêë',
    'ANIMAL REPRODUCTION': 'üêæ',
    'ANIMAL SHELTER AND HOUSING': 'üêÑ',
    'ANIMAL DISEASES AND PROTECTION': 'ü¶†',
    'BASIC AGRICULTURAL GENETICS': 'üåæ',
    'DNA: THE CODE OF LIFE': 'üß¨',
    'GENETICS AND INHERITANCE': 'üß¨',
    'GENETICALLY MODIFIED ORGANISMS (GMO)': 'üåæüî¨',
    'HUMAN REPRODUCTION': 'üßë‚Äçü§ù‚Äçüßë',
    'INTERNAL AND EXTERNAL PARASITES': 'üêõ',
    'MEIOSIS': 'üî¨',
    'PATTERNS OF INHERITANCE': 'üå±',
    'RESPONDING TO THE ENVIRONMENT (HUMANS)': 'üå°Ô∏è',
    'SELECTION': '‚úÖ',

    // Geography
    'DRAINAGE SYSTEMS IN SA': 'üèûÔ∏è',
    'FLUVIAL PROCESSES': 'üåä',
    'MAP SKILLS & GIS': 'üó∫Ô∏è',
    'MID-LATITUDE CYCLONES': 'üå™Ô∏è',
    'MODELS OF URBAN STRUCTURE': 'üèôÔ∏èüî≤',
    'RIVER GRADING': 'üèûÔ∏è',
    'SUBTROPICAL ANTICYCLONES AND ASSOCIATED WEATHER CONDITIONS': '‚òÄÔ∏è',
    'TROPICAL CYCLONES': 'üåÄ',
    'URBAN CLIMATES': 'üåÜ',
    'URBAN HIERARCHIES AND URBAN STRUCTURE & PATTERNS': 'üè¢',
    'URBAN SETTLEMENT ISSUES': 'üèôÔ∏è',
    'VALLEY CLIMATES': 'üèûÔ∏è',

    // Business Studies & Economics
    'AGRICULTURAL ENTREPRENEURSHIP': 'üå±',
    'AGRICULTURAL MARKETING SYSTEMS': 'üì¶',
    'AGRICULTURAL MARKETING AND MARKET EQUILIBRIUM': 'üì¶‚öñÔ∏è',
    'AGRICULTURAL PRODUCTION FACTORS': 'üåæ',
    'BUSINESS CYCLES': 'üîÑüìâ',
    'BUSINESS SECTORS & THEIR ENVIRONMENTS': 'üè¢',
    'CAPITAL AND MANAGEMENT': 'üíº',
    'CIRCULAR FLOW': 'üîÑ',
    'CREATIVE THINKING & PROBLEM SOLVING': 'üí°',
    'DYNAMICS OF MARKETS: PERFECT MARKETS': 'üìàüîí',
    'DYNAMICS OF MARKETS: IMPERFECT MARKETS': 'üìâüîß',
    'DYNAMICS OF MARKETS: MARKET FAILURES': 'üí•üìâ',
    'ECONOMIC AND SOCIAL INDICATORS': 'üìä',
    'ECONOMIC GROWTH AND DEVELOPMENT': 'üìà',
    'ECONOMIC ISSUES OF THE DAY: ENVIRONMENTAL SUSTAINABILITY': 'üåçüí°',
    'ECONOMIC ISSUES OF THE DAY: INFLATION': 'üí∏üìâ',
    'ECONOMIC ISSUES OF THE DAY: TOURISM': 'üåç‚úàÔ∏è',
    'FORMS OF OWNERSHIP': 'üè¢',
    'GROWTH & DEVELOPMENT: INDUSTRIAL DEVELOPMENT': 'üè≠üìà',
    'HUMAN RESOURCES FUNCTION': 'üë•üíº',
    'HUMAN RIGHTS, INCLUSIVITY & ENVIRONMENTAL ISSUES': 'üåçü§ù',
    'IMPACTS OF RECENT LEGISLATION': 'üìú‚öñÔ∏è',
    'INTERNATIONAL TRADE (FOREIGN EXCHANGE MARKETS)': 'üíµüåç',
    'INTERNATIONAL TRADE POLICIES (PROTECTIONISM & FREE TRADE)': 'üåêüí±',
    'INVESTMENT: INSURANCE': 'üíµ',
    'INVESTMENT: SECURITIES': 'üìà',
    'MACRO-ENVIRONMENT: BUSINESS STRATEGIES': 'üè¢üìà',
    'MANAGEMENT & LEADERSHIP': 'üßë‚Äçüíº',
    'PRESENTATION AND DATA RESPONSE': 'üìä',
    'PROFESSIONALISM & ETHICS': 'üíºü§ù',
    'PUBLIC SECTOR': 'üèõÔ∏è',
    'QUALITY OF PERFORMANCE': 'üåü',
    'SOCIAL RESPONSIBILITY': 'ü§ù',
    'TEAM PERFORMANCE & CONFLICT MANAGEMENT': 'üíºü§ù',

    // History
    'CIVIL RESISTANCE IN SOUTH AFRICA: 1970s to 1980': '‚úäüèΩ',
    'CIVIL SOCIETY PROTESTS 1950s-1990s': '‚úäüèΩ',
    'EXTENSION OF THE COLD WAR': '‚ùÑÔ∏è',
    'INDEPENDENT AFRICA': 'üåç',
    'THE COMING OF DEMOCRACY TO SOUTH AFRICA AND COMING TO TERMS WITH THE PAST': 'üó≥Ô∏è',
    'THE END OF THE COLD WAR AND NEW WORLD ORDER TO PRESENT': 'üåê',
    'TOPIC 1: EXTENSION OF THE COLD WAR': '‚ùÑÔ∏è',
    'TOPIC 2: INDEPENDENT AFRICA': 'üåç'
};

function getTopicEmoji(topic: string): string {
    const lowerTopic = topic.toLowerCase();
    const lowerMainCategory = topic.split(':')[0].trim().toLowerCase();

    // First try to match the exact topic
    const exactMatch = Object.entries(TOPIC_EMOJIS).find(([key]) => key.toLowerCase() === lowerTopic);
    if (exactMatch) {
        return exactMatch[1];
    }

    // If no exact match, try to match the main category (before the colon)
    const categoryMatch = Object.entries(TOPIC_EMOJIS).find(([key]) => key.toLowerCase() === lowerMainCategory);
    if (categoryMatch) {
        return categoryMatch[1];
    }

    // Return default emoji if no match found
    return 'üìö';
}

export function RecordingsList({ recordings, isLoading }: RecordingsListProps) {
    const { colors, isDark } = useTheme();
    const styles = createStyles(isDark);
    const [selectedRecording, setSelectedRecording] = useState<LectureRecording | null>(null);
    const [isModalVisible, setIsModalVisible] = useState(false);

    const groupedRecordings = useMemo(() => {
        return recordings.reduce((groups: GroupedRecordings, recording) => {
            const topic = recording.main_topic;
            if (!groups[topic]) {
                groups[topic] = [];
            }
            groups[topic].push(recording);
            return groups;
        }, {});
    }, [recordings]);

    const handleRecordingPress = (recording: LectureRecording) => {
        setSelectedRecording(recording);
        setIsModalVisible(true);
    };

    const handleCloseModal = () => {
        setIsModalVisible(false);
        setSelectedRecording(null);
    };

    if (isLoading) {
        return (
            <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color={colors.primary} />
            </View>
        );
    }

    if (recordings.length === 0) {
        return (
            <View style={styles.emptyContainer}>
                <ThemedText>No lecture recordings available for this subject.</ThemedText>
            </View>
        );
    }

    const renderRecordingCard = (lecture: LectureRecording) => (
        <TouchableOpacity
            key={lecture.recordingFileName}
            style={styles.recordingCard}
            onPress={() => handleRecordingPress(lecture)}
        >
            <View style={styles.recordingHeader}>
                {lecture.image ? (
                    <Image
                        source={{ uri: lecture.image }}
                        style={styles.thumbnail}
                        resizeMode="cover"
                    />
                ) : (
                    <View style={[styles.thumbnail, styles.thumbnailPlaceholder]}>
                        <Ionicons name="headset" size={40} color={colors.text} />
                    </View>
                )}
                <View style={styles.recordingInfo}>
                    <ThemedText style={styles.lectureTitle}>
                        {lecture.lecture_name}
                    </ThemedText>
                </View>
            </View>
        </TouchableOpacity>
    );

    return (
        <>
            <ScrollView style={styles.container}>
                <View style={styles.disclaimerContainer}>
                    <ThemedText style={styles.disclaimerText}>
                        ‚ö†Ô∏è All lectures are AI-generated and have not been quality checked
                    </ThemedText>
                </View>
                {Object.entries(groupedRecordings).map(([topic, topicRecordings]) => (
                    <View key={topic} style={styles.topicSection}>
                        <View style={styles.topicHeader}>
                            <View style={styles.topicTitleContainer}>
                                <ThemedText style={styles.topicEmoji}>{getTopicEmoji(topic)}</ThemedText>
                                <ThemedText style={styles.topicTitle}>{topic}</ThemedText>
                            </View>
                        </View>
                        {topicRecordings.map(renderRecordingCard)}
                    </View>
                ))}
            </ScrollView>

            <RecordingPlayerModal
                isVisible={isModalVisible}
                onClose={handleCloseModal}
                recording={selectedRecording}
            />
        </>
    );
}

function createStyles(isDark: boolean) {
    return StyleSheet.create({
        container: {
            flex: 1
        },
        loadingContainer: {
            flex: 1,
            justifyContent: 'center',
            alignItems: 'center',
            padding: 20,
        },
        emptyContainer: {
            flex: 1,
            justifyContent: 'center',
            alignItems: 'center',
            padding: 20,
        },
        topicSection: {
            marginBottom: 24,
        },
        topicHeader: {
            flexDirection: 'row',
            alignItems: 'center',
            marginBottom: 12,
            paddingHorizontal: 4,
        },
        topicTitleContainer: {
            flexDirection: 'row',
            alignItems: 'center',
            flex: 1,
        },
        topicEmoji: {
            fontSize: 24,
            marginRight: 8,
        },
        topicTitle: {
            fontSize: 17,
            fontWeight: '700',
            flex: 1,
            color: isDark ? '#E0E0E0' : '#333333',
        },
        recordingCard: {
            marginBottom: 12,
            borderRadius: 12,
            overflow: 'hidden',
            backgroundColor: isDark ? '#2a2a2a' : '#f5f5f5',
            padding: 12,
        },
        recordingHeader: {
            flexDirection: 'row',
            alignItems: 'flex-start',
        },
        thumbnail: {
            width: 80,
            height: 80,
            borderRadius: 8,
            marginRight: 12,
        },
        thumbnailPlaceholder: {
            backgroundColor: isDark ? '#3a3a3a' : '#e0e0e0',
            justifyContent: 'center',
            alignItems: 'center',
        },
        recordingInfo: {
            flex: 1,
            marginRight: 8,
        },
        lectureTitle: {
            fontSize: 15,
            lineHeight: 22,
        },
        disclaimerText: {
            fontSize: 12,
            color: isDark ? '#FFA500' : '#FF8C00',
            textAlign: 'center',
            padding: 12,
            backgroundColor: isDark ? 'rgba(255, 165, 0, 0.1)' : 'rgba(255, 140, 0, 0.1)',
            borderRadius: 8,
            marginBottom: 16,
        },
        disclaimerContainer: {
            paddingHorizontal: 16,
            marginTop: 8,
        },
    });
} 